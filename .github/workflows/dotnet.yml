# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Publish
      run: dotnet publish -c Release -o ./publish

    - name: Zip published app
      run: |
        powershell Compress-Archive -Path ./publish/* -DestinationPath ./my_app.zip

    - name: Get latest tag
      id: get_latest_tag
      run: |
        git fetch --tags
        TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
        echo ::set-output name=LATEST_TAG::$TAG
  
    - name: Increment tag
      id: increment_tag
      run: |
          LATEST_TAG=${{ steps.get_latest_tag.outputs.LATEST_TAG }}
          echo "Latest tag: $LATEST_TAG"
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="v1.0.0"
          else
            IFS='.' read -r -a TAG_PARTS <<< "${LATEST_TAG#v}"
            MAJOR=${TAG_PARTS[0]}
            MINOR=${TAG_PARTS[1]}
            PATCH=${TAG_PARTS[2]}
            PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi
          echo "New tag: $NEW_TAG"
          echo ::set-output name=NEW_TAG::$NEW_TAG
  
    - name: Create and push new tag
      run: |
          NEW_TAG=${{ steps.increment_tag.outputs.NEW_TAG }}
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag $NEW_TAG
          git push origin $NEW_TAG

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_tag.outputs.TAG_NAME }}
        release_name: Release ${{ steps.extract_tag.outputs.TAG_NAME }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish
        asset_name: my_app.zip
        asset_content_type: application/zip